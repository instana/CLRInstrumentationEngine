# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

cmake_minimum_required(VERSION 3.14)

project(InstanaPlugin)

# IF(NOT EXISTS "${CMAKE_INSTALL_PREFIX}" OR NOT IS_DIRECTORY "${CMAKE_INSTALL_PREFIX}")
    # message(FATAL_ERROR "Required property CMAKE_INSTALL_PREFIX not correctly defined.")
    # return()
# endif()

# IF(NOT EXISTS "${CORECLR_PAL_ROOT}" OR NOT IS_DIRECTORY "${CORECLR_PAL_ROOT}")
    # message(FATAL_ERROR "Required property CORECLR_PAL_ROOT not correctly defined.")
    # return()
# endif()

# IF(NOT EXISTS "${REPOSITORY_ROOT}" OR NOT IS_DIRECTORY "${REPOSITORY_ROOT}")
    # message(FATAL_ERROR "Required property REPOSITORY_ROOT not correctly defined.")
    # return()
# endif()

IF(NOT EXISTS "${REPOSITORY_ROOT}/src" OR NOT IS_DIRECTORY "${REPOSITORY_ROOT}/src")
    message(FATAL_ERROR "REPOSITORY_ROOT/src does not exist.")
    return()
endif()

if (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Debug" AND NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    message(FATAL_ERROR "Unknown build type! Set CMAKE_BUILD_TYPE to Debug or Release")
    return()
endif ()

# if (NOT DEFINED "${CMAKE_SYSTEM_NAME}")
    # message(FATAL_ERROR "Unknown build type! Set CMAKE_SYSTEM_NAME to Debug or Release")
    # return()
# endif ()

# IF(NOT EXISTS "${INTERMEDIATES_DIR}" OR NOT IS_DIRECTORY "${INTERMEDIATES_DIR}")
    # message(FATAL_ERROR "Required property INTERMEDIATES_DIR not correctly defined.")
    # return()
# endif()



# Macro to initialize various build properties based on build language/type.
# Supported arguments:
#   build_language - C, CPP
#   build_type - ClrInstrumentationEngine
#
# Make sure to call this macro as the first thing in the CMakeLists.txt file.
# For ex.,
#    build_init (CPP, ClrInstrumentationEngine)
#      will initialize the environment to build C++ ClrInstrumentationEngine sources.
macro (build_init build_language build_type)
    set (PROJECT_BUILD_LANGUAGE, "${build_language}")

    if ("${build_language}" STREQUAL CPP)
        message (" Build type : CPP")
        # The -fms-extensions enable the stuff like __if_exists, __declspec(uuid()), etc.
        add_compile_options(-fms-extensions)
        # Enabling this option helps with certain ares (like allowing forward declaration of Enums),
        # but this results in disabling certain new types like (int32_t) which will cause the
        # standard c++ template library to throw errors as these types will be based on other types.
        # For this reason, this option can't be enabled.
        # add_compile_options(-fms-compatibility)
        # add_compile_options(-fdelayed-template-parsing)
        # add_compile_options(-fdiagnostics-show-category=name)
        add_compile_options(-std=c++14)
        add_compile_options(-g)
        add_compile_options(-pthread)
        # add_compile_options(-ferror-limit=1000)
        # if (CMAKE_BUILD_TYPE STREQUAL Debug)
            # #enable debugging of std types
            # add_compile_options(-fno-limit-debug-info)
        # endif(CMAKE_BUILD_TYPE STREQUAL Debug)
    endif ("${build_language}" STREQUAL CPP)

    # Sets the project build type.
    set (PROJECT_BUILD_TYPE, "${build_type}")


    message (" Build type : ${build_type}")
    add_definitions(-DVSDEBUGENG_USE_CPP11_SCOPED_ENUMS)
    add_definitions(-DFEATURE_PAL)
    add_definitions(-DPORTABLE)

    # #TODO: HACK this is pulling in InstrumentationEngine.h from the output of the windows build.
    # # We are forced to do this because we don't have MIDL to generate source on Linux. Need to
    # # find a better way to do this. Also note we only support 64bit Linux build so hard coding
    # # that part.
    # include_directories(${REPOSITORY_ROOT}/bin/${CMAKE_BUILD_TYPE}/x64)

     include_directories(${REPOSITORY_ROOT}/inc/clr/prof) # Must be ahead of Core CLR PAL
     include_directories(${REPOSITORY_ROOT}/src/unix/inc)
     include_directories(${REPOSITORY_ROOT}/src/unix/inc/atl)
     include_directories(${REPOSITORY_ROOT}/src/unix/inc/empty)
     include_directories(${REPOSITORY_ROOT}/src/unix/inc/winsdk)
    include_directories(${REPOSITORY_ROOT}/src/InstrumentationEngine.Api)
    # include_directories(${GENERATED_INCLUDE_DIR})
    include_directories(${REPOSITORY_ROOT}/inc/clr/extra)

    add_definitions(-DCOM_NO_WINDOWS_H)
    add_definitions(-DUNICODE)
    add_definitions(-D_ATL_DISABLE_NOTHROW_NEW)
    add_definitions(-D_ATL_NO_DEBUG_CRT)
    add_definitions(-DFEATURE_CORECLR_HOST=1)
    add_definitions(-D__PLACEMENT_NEW_INLINE)
    add_definitions(-DPAL_STDCPP_COMPAT)
    add_definitions(-DENABLE_DOWNLEVEL_FOR_NLS)
    add_definitions(-DPLATFORM_UNIX)
    add_definitions(-DXPLAT=1)

    # if (CMAKE_SYSTEM_NAME STREQUAL Linux)
        # add_definitions(-D__LINUX__)
        # add_definitions(-D_LINUX_)
    # endif(CMAKE_SYSTEM_NAME STREQUAL Linux)

    # add_definitions(-DBIT64)

    # if (CMAKE_BUILD_TYPE STREQUAL Debug)
        # add_definitions(-DDEBUG)
        # # add_definitions(-D_DEBUG) TODO: Enable this
    # endif ()

    # if(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
        # message("Detected Linux x86_64")
        # add_definitions(-DLINUX64)
        # add_definitions(-D_M_AMD64)
        # add_definitions(-DTARGET_AMD64)
    # else (CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
        # message(FATAL_ERROR "error: Detected non x86_64 target processor. Not supported!")
    # endif(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)

    # Ignored warnings
    # TODO: Reenable these
    # add_compile_options(-Wno-macro-redefined)
    # add_compile_options(-Wno-ignored-attributes)
    # add_compile_options(-Wno-unused-value)
    # add_compile_options(-Wno-null-arithmetic)
    # add_compile_options(-Wno-delete-non-virtual-dtor)
    # add_compile_options(-Wno-tautological-constant-out-of-range-compare)
    # add_compile_options(-Wno-extra-tokens)
    # add_compile_options(-Wno-logical-op-parentheses)
    # add_compile_options(-Wno-comment)
    # add_compile_options(-Wno-invalid-offsetof)
    # add_compile_options(-Wno-microsoft)
    # add_compile_options(-Wno-null-conversion)
    # add_compile_options(-Wno-missing-declarations)
    # add_compile_options(-Wno-duplicate-decl-specifier)
    # add_compile_options(-Wno-switch)
    # add_compile_options(-Wno-uninitialized)
    # add_compile_options(-Wno-ignored-pragmas)
    # add_compile_options(-Wno-new-returns-null)
    # add_compile_options(-Wno-deprecated-declarations)
    # add_compile_options(-Wno-delete-incomplete)
    # add_compile_options(-Wno-pragma-pack)
    # add_compile_options(-Wno-unknown-warning-option)

    # Turn all enabled warnings into errors
    # add_compile_options(-Werror)

    add_compile_options(-fPIC)
endmacro (build_init)

# don't use the PAL for tests
build_init(CPP InstanaPlugin)

set(src_files
    ./dllmain.cpp
	./InstanaInstrumentation.cpp
    ./InstrumentationEngineApi.cpp
    ./stdafx.cpp
)

macro(add_lib lib_name type use_pal use_redefines hide_symbols)
    add_library(${lib_name}
        ${type}
        ${ARGN})
endmacro(add_lib lib_name type use_redefines hide_symbols sources)

add_lib(${PROJECT_NAME}
    SHARED
    # false # use_pal
    # false # use_redefines
    # true # hide_symbols
    ${src_files}
    )
if(CMAKE_SYSTEM_NAME STREQUAL Linux)
	target_include_directories(${PROJECT_NAME} PUBLIC ${REPOSITORY_ROOT}/src/unix/inc/mincor )
endif()

# For some reason linking against musl-libc we need libintl and on glibc we need libdl.
# They have nothing to do with one another, each is just a quirk of the environment.
if(CLR_CMAKE_PLATFORM_ALPINE_LINUX)
    target_link_libraries(${PROJECT_NAME} :libintl.so)
elseif(CMAKE_SYSTEM_NAME STREQUAL Linux)
	message("Inside the target link libraries of Linux")
    # NOTE: Explicitly link to the .so version of libdl.so to make sure we don't somehow accidentally
    # start statically linking to these, as these are LGPL components.
    target_link_libraries(${PROJECT_NAME} :libdl.so)
else()
	message("Inside the target link libraries of windows")
    target_link_libraries(${PROJECT_NAME} dl)
endif()

target_link_libraries(
    ${PROJECT_NAME}
    stdc++
    Common.Lib
)

if (CMAKE_SYSTEM_NAME STREQUAL Linux)
    target_link_libraries(${PROJECT_NAME} stdc++fs)
elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin)
    target_link_libraries(${PROJECT_NAME}
        iconv
        "-framework CoreFoundation"
        "-framework Security"
    )
endif()